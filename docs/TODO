readme:
fun facts
io_uring std lib
number of fns
number of assertions
number of tests
how to install
how to test
benchmark
what can you use high tps for? fast import of a huge set of historical payments

---
io uring comments
// The kernel was unable to allocate memory or ran out of resources for the request:
// The application should wait for some completions and try again.


// The file descriptor is valid, but the ring is not in the right state:

// The application attempted to overcommit the number of requests it can have pending:

// The operation was interrupted by a delivery of a signal before it could complete:
+            // This can happen while waiting for events with IORING_ENTER_GETEVENTS.

connect - /// Queues (but does not submit) an SQE to perform a `connect(2)` on a socket.
---
split parse function when forwarding to journal, use this to avoid awkwardness with network header pointer
use io_uring for journal
client cannot send ack to server

show how to run tests
show how we can use comptime config to change struct sizes

Explain that a transfer is a journal entry (date/description/source and target accounts/amount), but why we also add support for two-phase commit journal entries (to keep all business logic non-distributed, to support id-only fulfills), even though journal entries can also auto-commit, and that SNAP-style journal entries can be supported by the underlying data stored by TigerBeetle as materialized views.

Double-check that we explain why we don't collapse balances in the account struct.

Remove BLOBs.

Explain why we don't simply use fds to lookup static network connection buffers (the fd range includes stdin/stdout/stdout as well as all open file system fds, so this quickly exhausts our pre-allocated network buffers).

io_uring.zig -> ../zig/lib/std/os/linux/io_uring.zig
