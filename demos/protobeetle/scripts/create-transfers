#!/usr/bin/env node

const assert = require('assert');

const Node = {
  crypto: require('crypto'),
  fs: require('fs')
};

const RandomBytes = (function() {
  // A user space stream cipher CPRNG like this is about twice as fast as system
  // calls into the kernel to access /dev/urandom. It's also deterministic,
  // which is exactly what we want for testing and benchmarking purposes.
  const cipher = Node.crypto.createCipheriv(
    'AES-256-CTR',
    Buffer.alloc(32),
    Buffer.alloc(16)
  );
  const zeroes = Buffer.alloc(1024 * 1024);
  return function(size) {
    return cipher.update(zeroes.slice(0, size));
  };
})();

const CreateTransfer = (function() {
  // transfer {
  //                 id: 16 bytes (128-bit)
  //           payer_id:  8 bytes ( 64-bit)
  //           payee_id:  8 bytes ( 64-bit)
  //             amount:  8 bytes ( 64-bit)
  //   expire timestamp:  6 bytes ( 48-bit)
  //   create timestamp:  6 bytes ( 48-bit) [reserved]
  //   commit timestamp:  6 bytes ( 48-bit) [reserved]
  //        userdata_id:  6 bytes ( 48-bit) [reserved]
  // }
  
  const payer_id = Buffer.alloc(8, 1);
  const payee_id = Buffer.alloc(8, 2);
  const amount = Buffer.alloc(8);
  const expire_timestamp = Buffer.alloc(6);
  const create_timestamp = Buffer.alloc(6);
  const commit_timestamp = Buffer.alloc(6);
  const userdata_id = Buffer.alloc(6);
  amount.writeUIntBE(1, 0, 6); // TODO: 64-bit support
  expire_timestamp.writeUIntBE(1908895743000, 0, 6); // 2030-06-28T16:49:03.000Z

  return function() {
    const id = RandomBytes(16);
    const buffer = Buffer.concat([
      id,
      payer_id,
      payee_id,
      amount,
      expire_timestamp,
      create_timestamp,
      commit_timestamp,
      userdata_id
    ]);
    assert(buffer.length == 64);
    return buffer;
  };
})();

const now = Date.now();
const count = 1000 * 1000;
const transfers = Buffer.alloc(64 * count);
var offset = 0;
var length = count;
while (length--) {
  offset += CreateTransfer().copy(transfers, offset);
}
assert(offset === transfers.length);
Node.fs.writeFileSync('transfers', transfers);
console.log(`Created ${count} transfers in ${Date.now() - now}ms`);
